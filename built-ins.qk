/*
 * Stubs for built-in classes of Quack. We do not generate code
 * for these.  These are used only for static semantics checking.
 * Their real code is hand-written C code.
 */

 class Obj() {
    def PRINT() { printf("How do I print?"); }
    def STR(): String { return "TODO: I am an Obj"; }
    def EQUALS(other: Obj): Boolean { return true; } // Default is object identity
 }

 class Nothing() { }

 class String() {
    this.value = "";
    def PLUS(other: String): String {  }      // +
    def EQUALS(other: String): Boolean { return this.value == other.value; }   // ==
    def ATMOST(other: String): Boolean { return this.value <= other.value; }   // <=
    def LESS(other: String): Boolean { return this.value < other.value; }     // <
    def ATLEAST(other: String): Boolean { return this.value >= other.value; }  // >=
    def MORE(other: String): Boolean { return this.value > other.value; }     // >
 }

 class Boolean() {
    this.value = 0;
  }

 class Int() {
    this.value = 0;
    def PLUS(right: Int): Int { return this.value + right.value;}   // this + right
    def TIMES(right: Int): Int { return this.value * right.value; }  // this * right
    def MINUS(right: Int): Int { return this.value - right.value; }  // this - right
    def DIVIDE(right: Int): Int { return this.value / right.value; }    // this / right
    def ATMOST(other: Int): Boolean { return this.value <= other.value; }     // <=
    def LESS(other: Int): Boolean { return this.value < other.value; }       // <
    def ATLEAST(other: Int): Boolean { return this.value >= other.value; }    // >=
    def MORE(other: Int): Boolean { return this.value > other.value; }       // >
 }