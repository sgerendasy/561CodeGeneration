
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\110\000\002\002\004\000\002\002\004\000\002\022" +
    "\007\000\002\022\005\000\002\022\003\000\002\023\005" +
    "\000\002\023\003\000\002\023\003\000\002\003\004\000" +
    "\002\003\003\000\002\004\015\000\002\004\013\000\002" +
    "\005\004\000\002\005\003\000\002\010\004\000\002\010" +
    "\003\000\002\010\004\000\002\010\003\000\002\010\003" +
    "\000\002\010\004\000\002\024\004\000\002\024\003\000" +
    "\002\025\014\000\002\025\012\000\002\012\004\000\002" +
    "\012\003\000\002\011\005\000\002\011\007\000\002\017" +
    "\007\000\002\006\004\000\002\006\003\000\002\020\010" +
    "\000\002\014\007\000\002\014\010\000\002\014\010\000" +
    "\002\015\006\000\002\016\007\000\002\016\010\000\002" +
    "\016\010\000\002\013\007\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\004\000\002\007\004\000\002" +
    "\007\003\000\002\007\003\000\002\007\005\000\002\007" +
    "\010\000\002\007\006\000\002\007\003\000\002\007\005" +
    "\000\002\026\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\032\002\uffba\004\uffba\007\uffba\012\uffba\013" +
    "\uffba\014\uffba\022\uffba\026\uffba\040\uffba\043\uffba\044\uffba" +
    "\045\uffba\001\002\000\032\002\uffba\004\012\007\uffba\012" +
    "\uffba\013\uffba\014\uffba\022\uffba\026\uffba\040\uffba\043\uffba" +
    "\044\uffba\045\uffba\001\002\000\032\002\ufff8\004\ufff8\007" +
    "\ufff8\012\ufff8\013\ufff8\014\ufff8\022\ufff8\026\ufff8\040\ufff8" +
    "\043\ufff8\044\ufff8\045\ufff8\001\002\000\004\002\007\001" +
    "\002\000\004\002\001\001\002\000\030\002\000\007\040" +
    "\012\033\013\036\014\045\022\034\026\041\040\046\043" +
    "\030\044\031\045\050\001\002\000\032\002\ufff9\004\ufff9" +
    "\007\ufff9\012\ufff9\013\ufff9\014\ufff9\022\ufff9\026\ufff9\040" +
    "\ufff9\043\ufff9\044\ufff9\045\ufff9\001\002\000\004\044\014" +
    "\001\002\000\034\002\ufff4\005\ufff4\007\ufff4\012\ufff4\013" +
    "\ufff4\014\ufff4\022\ufff4\026\ufff4\031\ufff4\040\ufff4\043\ufff4" +
    "\044\ufff4\045\ufff4\001\002\000\004\026\015\001\002\000" +
    "\010\027\uffba\033\uffba\044\016\001\002\000\004\032\221" +
    "\001\002\000\006\027\ufffd\033\ufffd\001\002\000\006\027" +
    "\022\033\021\001\002\000\004\044\216\001\002\000\006" +
    "\006\024\030\023\001\002\000\032\005\uffba\007\uffba\012" +
    "\uffba\013\uffba\014\uffba\022\uffba\026\uffba\031\uffba\040\uffba" +
    "\043\uffba\044\uffba\045\uffba\001\002\000\004\044\025\001" +
    "\002\000\004\030\026\001\002\000\032\005\uffba\007\uffba" +
    "\012\uffba\013\uffba\014\uffba\022\uffba\026\uffba\031\uffba\040" +
    "\uffba\043\uffba\044\uffba\045\uffba\001\002\000\032\005\uffba" +
    "\007\040\012\033\013\036\014\045\022\034\026\041\031" +
    "\uffba\040\046\043\030\044\031\045\050\001\002\000\046" +
    "\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\023\uffc0\024" +
    "\uffc0\025\uffc0\027\uffc0\030\uffc0\032\uffc0\033\uffc0\034\uffc0" +
    "\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\001\002\000" +
    "\050\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\023\uffbc" +
    "\024\uffbc\025\uffbc\026\210\027\uffbc\030\uffbc\032\uffbc\033" +
    "\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc" +
    "\001\002\000\040\015\076\016\074\017\105\020\075\021" +
    "\106\023\203\024\077\025\103\032\201\034\202\035\104" +
    "\036\102\037\100\040\073\041\101\001\002\000\016\022" +
    "\034\026\041\040\046\043\030\044\031\045\050\001\002" +
    "\000\016\022\034\026\041\040\046\043\030\044\031\045" +
    "\050\001\002\000\034\002\uffef\005\uffef\007\uffef\012\uffef" +
    "\013\uffef\014\uffef\022\uffef\026\uffef\031\uffef\040\uffef\043" +
    "\uffef\044\uffef\045\uffef\001\002\000\020\022\034\026\041" +
    "\034\uffe8\040\046\043\030\044\031\045\050\001\002\000" +
    "\004\034\172\001\002\000\016\022\034\026\041\040\046" +
    "\043\030\044\031\045\050\001\002\000\016\022\034\026" +
    "\041\040\046\043\030\044\031\045\050\001\002\000\006" +
    "\005\uffec\031\uffec\001\002\000\004\034\146\001\002\000" +
    "\034\002\ufff0\005\ufff0\007\ufff0\012\ufff0\013\ufff0\014\ufff0" +
    "\022\ufff0\026\ufff0\031\ufff0\040\ufff0\043\ufff0\044\ufff0\045" +
    "\ufff0\001\002\000\004\044\132\001\002\000\016\022\034" +
    "\026\041\040\046\043\030\044\031\045\050\001\002\000" +
    "\034\002\ufff2\005\ufff2\007\ufff2\012\ufff2\013\ufff2\014\ufff2" +
    "\022\ufff2\026\ufff2\031\ufff2\040\ufff2\043\ufff2\044\ufff2\045" +
    "\ufff2\001\002\000\046\015\uffc1\016\uffc1\017\uffc1\020\uffc1" +
    "\021\uffc1\023\uffc1\024\uffc1\025\uffc1\027\uffc1\030\uffc1\032" +
    "\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1" +
    "\041\uffc1\001\002\000\006\005\053\031\054\001\002\000" +
    "\034\002\ufff5\005\ufff5\007\ufff5\012\ufff5\013\ufff5\014\ufff5" +
    "\022\ufff5\026\ufff5\031\ufff5\040\ufff5\043\ufff5\044\ufff5\045" +
    "\ufff5\001\002\000\004\044\056\001\002\000\032\002\ufff7" +
    "\004\ufff7\007\ufff7\012\ufff7\013\ufff7\014\ufff7\022\ufff7\026" +
    "\ufff7\040\ufff7\043\ufff7\044\ufff7\045\ufff7\001\002\000\006" +
    "\005\uffed\031\uffed\001\002\000\004\026\057\001\002\000" +
    "\010\027\uffba\033\uffba\044\016\001\002\000\006\027\061" +
    "\033\021\001\002\000\006\030\062\032\063\001\002\000" +
    "\030\007\uffba\012\uffba\013\uffba\014\uffba\022\uffba\026\uffba" +
    "\031\uffba\040\uffba\043\uffba\044\uffba\045\uffba\001\002\000" +
    "\004\044\064\001\002\000\004\030\065\001\002\000\030" +
    "\007\uffba\012\uffba\013\uffba\014\uffba\022\uffba\026\uffba\031" +
    "\uffba\040\uffba\043\uffba\044\uffba\045\uffba\001\002\000\030" +
    "\007\040\012\033\013\036\014\045\022\034\026\041\031" +
    "\067\040\046\043\030\044\031\045\050\001\002\000\006" +
    "\005\uffeb\031\uffeb\001\002\000\030\007\040\012\033\013" +
    "\036\014\045\022\034\026\041\031\071\040\046\043\030" +
    "\044\031\045\050\001\002\000\006\005\uffea\031\uffea\001" +
    "\002\000\046\015\076\016\074\017\105\020\uffc3\021\uffc3" +
    "\023\uffc3\024\077\025\103\027\uffc3\030\uffc3\032\uffc3\033" +
    "\uffc3\034\uffc3\035\104\036\102\037\uffc3\040\uffc3\041\101" +
    "\001\002\000\016\022\034\026\041\040\046\043\030\044" +
    "\031\045\050\001\002\000\016\022\034\026\041\040\046" +
    "\043\030\044\031\045\050\001\002\000\016\022\034\026" +
    "\041\040\046\043\030\044\031\045\050\001\002\000\016" +
    "\022\034\026\041\040\046\043\030\044\031\045\050\001" +
    "\002\000\016\022\034\026\041\040\046\043\030\044\031" +
    "\045\050\001\002\000\016\022\034\026\041\040\046\043" +
    "\030\044\031\045\050\001\002\000\004\044\114\001\002" +
    "\000\016\022\034\026\041\040\046\043\030\044\031\045" +
    "\050\001\002\000\016\022\034\026\041\040\046\043\030" +
    "\044\031\045\050\001\002\000\016\022\034\026\041\040" +
    "\046\043\030\044\031\045\050\001\002\000\016\022\034" +
    "\026\041\040\046\043\030\044\031\045\050\001\002\000" +
    "\016\022\034\026\041\040\046\043\030\044\031\045\050" +
    "\001\002\000\046\015\076\016\074\017\105\020\uffc4\021" +
    "\uffc4\023\uffc4\024\077\025\103\027\uffc4\030\uffc4\032\uffc4" +
    "\033\uffc4\034\uffc4\035\104\036\102\037\uffc4\040\uffc4\041" +
    "\101\001\002\000\034\020\uffc8\021\uffc8\023\uffc8\027\uffc8" +
    "\030\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037" +
    "\uffc8\040\uffc8\041\101\001\002\000\046\015\076\016\074" +
    "\017\105\020\uffcc\021\uffcc\023\uffcc\024\077\025\103\027" +
    "\uffcc\030\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc" +
    "\037\uffcc\040\uffcc\041\101\001\002\000\034\020\uffca\021" +
    "\uffca\023\uffca\027\uffca\030\uffca\032\uffca\033\uffca\034\uffca" +
    "\035\uffca\036\uffca\037\uffca\040\uffca\041\101\001\002\000" +
    "\046\015\076\016\074\017\105\020\uffcb\021\uffcb\023\uffcb" +
    "\024\077\025\103\027\uffcb\030\uffcb\032\uffcb\033\uffcb\034" +
    "\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\101\001\002" +
    "\000\050\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\023" +
    "\uffbf\024\uffbf\025\uffbf\026\115\027\uffbf\030\uffbf\032\uffbf" +
    "\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041" +
    "\uffbf\001\002\000\022\022\034\026\041\027\uffba\033\uffba" +
    "\040\046\043\030\044\031\045\050\001\002\000\006\027" +
    "\ufffa\033\ufffa\001\002\000\006\027\122\033\121\001\002" +
    "\000\036\015\076\016\074\017\105\020\075\021\106\024" +
    "\077\025\103\027\ufffb\033\ufffb\035\104\036\102\037\100" +
    "\040\073\041\101\001\002\000\016\022\034\026\041\040" +
    "\046\043\030\044\031\045\050\001\002\000\046\015\uffbe" +
    "\016\uffbe\017\uffbe\020\uffbe\021\uffbe\023\uffbe\024\uffbe\025" +
    "\uffbe\027\uffbe\030\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe" +
    "\036\uffbe\037\uffbe\040\uffbe\041\uffbe\001\002\000\036\015" +
    "\076\016\074\017\105\020\075\021\106\024\077\025\103" +
    "\027\ufffc\033\ufffc\035\104\036\102\037\100\040\073\041" +
    "\101\001\002\000\046\015\076\016\074\017\105\020\uffce" +
    "\021\uffce\023\uffce\024\077\025\103\027\uffce\030\uffce\032" +
    "\uffce\033\uffce\034\uffce\035\104\036\102\037\uffce\040\uffce" +
    "\041\101\001\002\000\034\020\uffc9\021\uffc9\023\uffc9\027" +
    "\uffc9\030\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9" +
    "\037\uffc9\040\uffc9\041\101\001\002\000\034\020\uffc7\021" +
    "\uffc7\023\uffc7\027\uffc7\030\uffc7\032\uffc7\033\uffc7\034\uffc7" +
    "\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041\101\001\002\000" +
    "\046\015\076\016\074\017\105\020\uffc5\021\uffc5\023\uffc5" +
    "\024\077\025\103\027\uffc5\030\uffc5\032\uffc5\033\uffc5\034" +
    "\uffc5\035\104\036\102\037\uffc5\040\uffc5\041\101\001\002" +
    "\000\034\020\uffc6\021\uffc6\023\uffc6\027\uffc6\030\uffc6\032" +
    "\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6" +
    "\041\101\001\002\000\046\015\076\016\074\017\105\020" +
    "\uffcd\021\uffcd\023\uffcd\024\077\025\103\027\uffcd\030\uffcd" +
    "\032\uffcd\033\uffcd\034\uffcd\035\104\036\102\037\uffcd\040" +
    "\uffcd\041\101\001\002\000\004\030\133\001\002\000\006" +
    "\031\uffba\044\uffba\001\002\000\006\031\136\044\137\001" +
    "\002\000\006\031\uffe3\044\uffe3\001\002\000\034\002\uffe5" +
    "\005\uffe5\007\uffe5\012\uffe5\013\uffe5\014\uffe5\022\uffe5\026" +
    "\uffe5\031\uffe5\040\uffe5\043\uffe5\044\uffe5\045\uffe5\001\002" +
    "\000\004\032\141\001\002\000\006\031\uffe4\044\uffe4\001" +
    "\002\000\004\044\142\001\002\000\004\030\143\001\002" +
    "\000\030\007\uffba\012\uffba\013\uffba\014\uffba\022\uffba\026" +
    "\uffba\031\uffba\040\uffba\043\uffba\044\uffba\045\uffba\001\002" +
    "\000\030\007\040\012\033\013\036\014\045\022\034\026" +
    "\041\031\145\040\046\043\030\044\031\045\050\001\002" +
    "\000\006\031\uffe2\044\uffe2\001\002\000\034\002\ufff1\005" +
    "\ufff1\007\ufff1\012\ufff1\013\ufff1\014\ufff1\022\ufff1\026\ufff1" +
    "\031\ufff1\040\ufff1\043\ufff1\044\ufff1\045\ufff1\001\002\000" +
    "\034\015\076\016\074\017\105\020\075\021\106\024\077" +
    "\025\103\027\150\035\104\036\102\037\100\040\073\041" +
    "\101\001\002\000\046\015\uffbb\016\uffbb\017\uffbb\020\uffbb" +
    "\021\uffbb\023\uffbb\024\uffbb\025\uffbb\027\uffbb\030\uffbb\032" +
    "\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb" +
    "\041\uffbb\001\002\000\034\015\076\016\074\017\105\020" +
    "\075\021\106\024\077\025\103\030\152\035\104\036\102" +
    "\037\100\040\073\041\101\001\002\000\030\007\uffba\012" +
    "\uffba\013\uffba\014\uffba\022\uffba\026\uffba\031\uffba\040\uffba" +
    "\043\uffba\044\uffba\045\uffba\001\002\000\030\007\040\012" +
    "\033\013\036\014\045\022\034\026\041\031\154\040\046" +
    "\043\030\044\031\045\050\001\002\000\040\002\uffe1\005" +
    "\uffe1\007\uffe1\010\157\011\156\012\uffe1\013\uffe1\014\uffe1" +
    "\022\uffe1\026\uffe1\031\uffe1\040\uffe1\043\uffe1\044\uffe1\045" +
    "\uffe1\001\002\000\034\002\uffe0\005\uffe0\007\uffe0\012\uffe0" +
    "\013\uffe0\014\uffe0\022\uffe0\026\uffe0\031\uffe0\040\uffe0\043" +
    "\uffe0\044\uffe0\045\uffe0\001\002\000\004\030\167\001\002" +
    "\000\016\022\034\026\041\040\046\043\030\044\031\045" +
    "\050\001\002\000\034\002\uffdf\005\uffdf\007\uffdf\012\uffdf" +
    "\013\uffdf\014\uffdf\022\uffdf\026\uffdf\031\uffdf\040\uffdf\043" +
    "\uffdf\044\uffdf\045\uffdf\001\002\000\034\015\076\016\074" +
    "\017\105\020\075\021\106\024\077\025\103\030\162\035" +
    "\104\036\102\037\100\040\073\041\101\001\002\000\030" +
    "\007\uffba\012\uffba\013\uffba\014\uffba\022\uffba\026\uffba\031" +
    "\uffba\040\uffba\043\uffba\044\uffba\045\uffba\001\002\000\030" +
    "\007\040\012\033\013\036\014\045\022\034\026\041\031" +
    "\164\040\046\043\030\044\031\045\050\001\002\000\040" +
    "\002\uffdd\005\uffdd\007\uffdd\010\157\011\156\012\uffdd\013" +
    "\uffdd\014\uffdd\022\uffdd\026\uffdd\031\uffdd\040\uffdd\043\uffdd" +
    "\044\uffdd\045\uffdd\001\002\000\034\002\uffdb\005\uffdb\007" +
    "\uffdb\012\uffdb\013\uffdb\014\uffdb\022\uffdb\026\uffdb\031\uffdb" +
    "\040\uffdb\043\uffdb\044\uffdb\045\uffdb\001\002\000\034\002" +
    "\uffdc\005\uffdc\007\uffdc\012\uffdc\013\uffdc\014\uffdc\022\uffdc" +
    "\026\uffdc\031\uffdc\040\uffdc\043\uffdc\044\uffdc\045\uffdc\001" +
    "\002\000\030\007\uffba\012\uffba\013\uffba\014\uffba\022\uffba" +
    "\026\uffba\031\uffba\040\uffba\043\uffba\044\uffba\045\uffba\001" +
    "\002\000\030\007\040\012\033\013\036\014\045\022\034" +
    "\026\041\031\171\040\046\043\030\044\031\045\050\001" +
    "\002\000\034\002\uffde\005\uffde\007\uffde\012\uffde\013\uffde" +
    "\014\uffde\022\uffde\026\uffde\031\uffde\040\uffde\043\uffde\044" +
    "\uffde\045\uffde\001\002\000\034\002\ufff3\005\ufff3\007\ufff3" +
    "\012\ufff3\013\ufff3\014\ufff3\022\ufff3\026\ufff3\031\ufff3\040" +
    "\ufff3\043\ufff3\044\ufff3\045\ufff3\001\002\000\034\015\076" +
    "\016\074\017\105\020\075\021\106\024\077\025\103\034" +
    "\uffe9\035\104\036\102\037\100\040\073\041\101\001\002" +
    "\000\046\015\076\016\074\017\105\020\uffc2\021\uffc2\023" +
    "\uffc2\024\077\025\103\027\uffc2\030\uffc2\032\uffc2\033\uffc2" +
    "\034\uffc2\035\104\036\102\037\uffc2\040\uffc2\041\101\001" +
    "\002\000\034\015\076\016\074\017\105\020\075\021\106" +
    "\024\077\025\103\030\176\035\104\036\102\037\100\040" +
    "\073\041\101\001\002\000\030\007\uffba\012\uffba\013\uffba" +
    "\014\uffba\022\uffba\026\uffba\031\uffba\040\uffba\043\uffba\044" +
    "\uffba\045\uffba\001\002\000\030\007\040\012\033\013\036" +
    "\014\045\022\034\026\041\031\200\040\046\043\030\044" +
    "\031\045\050\001\002\000\034\002\uffda\005\uffda\007\uffda" +
    "\012\uffda\013\uffda\014\uffda\022\uffda\026\uffda\031\uffda\040" +
    "\uffda\043\uffda\044\uffda\045\uffda\001\002\000\004\044\205" +
    "\001\002\000\034\002\uffee\005\uffee\007\uffee\012\uffee\013" +
    "\uffee\014\uffee\022\uffee\026\uffee\031\uffee\040\uffee\043\uffee" +
    "\044\uffee\045\uffee\001\002\000\016\022\034\026\041\040" +
    "\046\043\030\044\031\045\050\001\002\000\034\015\076" +
    "\016\074\017\105\020\075\021\106\024\077\025\103\034" +
    "\uffe7\035\104\036\102\037\100\040\073\041\101\001\002" +
    "\000\004\023\206\001\002\000\016\022\034\026\041\040" +
    "\046\043\030\044\031\045\050\001\002\000\034\015\076" +
    "\016\074\017\105\020\075\021\106\024\077\025\103\034" +
    "\uffe6\035\104\036\102\037\100\040\073\041\101\001\002" +
    "\000\022\022\034\026\041\027\uffba\033\uffba\040\046\043" +
    "\030\044\031\045\050\001\002\000\006\027\212\033\121" +
    "\001\002\000\046\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021" +
    "\uffbd\023\uffbd\024\uffbd\025\uffbd\027\uffbd\030\uffbd\032\uffbd" +
    "\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041" +
    "\uffbd\001\002\000\032\005\uffba\007\040\012\033\013\036" +
    "\014\045\022\034\026\041\031\uffba\040\046\043\030\044" +
    "\031\045\050\001\002\000\006\005\053\031\215\001\002" +
    "\000\032\002\ufff6\004\ufff6\007\ufff6\012\ufff6\013\ufff6\014" +
    "\ufff6\022\ufff6\026\ufff6\040\ufff6\043\ufff6\044\ufff6\045\ufff6" +
    "\001\002\000\004\032\217\001\002\000\004\044\220\001" +
    "\002\000\006\027\uffff\033\uffff\001\002\000\004\044\222" +
    "\001\002\000\006\027\ufffe\033\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\010\002\005\003\003\026\004\001\001\000" +
    "\010\004\010\005\007\026\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\007\031\010" +
    "\051\011\036\012\042\013\034\014\046\017\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\022\017\026\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\212\026\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\026\026" +
    "\012\001\001\000\024\007\031\010\051\011\036\012\042" +
    "\013\034\014\046\017\043\024\050\026\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\174\001\001\000\004\007\173\001\001\000\002\001" +
    "\001\000\004\007\172\001\001\000\002\001\001\000\004" +
    "\007\150\001\001\000\004\007\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\022\057\026\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\067\026\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\065\026\012" +
    "\001\001\000\020\007\031\010\051\011\036\012\042\013" +
    "\034\014\046\017\043\001\001\000\002\001\001\000\020" +
    "\007\031\010\051\011\036\012\042\013\034\014\046\017" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\130\001\001\000\004\007\127\001\001\000\004\007" +
    "\126\001\001\000\004\007\125\001\001\000\004\007\124" +
    "\001\001\000\004\007\123\001\001\000\002\001\001\000" +
    "\004\007\112\001\001\000\004\007\111\001\001\000\004" +
    "\007\110\001\001\000\004\007\107\001\001\000\004\007" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\007\117\023\116\026\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\133\026\134\001\001\000\004\020\137\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\143\026\012\001\001\000\020\007\031\010\051" +
    "\011\036\012\042\013\034\014\046\017\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\152\026\012\001" +
    "\001\000\020\007\031\010\051\011\036\012\042\013\034" +
    "\014\046\017\043\001\001\000\006\015\157\016\154\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\160" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\162\026\012\001\001\000\020\007\031\010\051\011\036" +
    "\012\042\013\034\014\046\017\043\001\001\000\006\015" +
    "\165\016\164\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\167\026\012\001\001\000\020\007\031\010" +
    "\051\011\036\012\042\013\034\014\046\017\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\176\026\012" +
    "\001\001\000\020\007\031\010\051\011\036\012\042\013" +
    "\034\014\046\017\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\203\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\206\001\001" +
    "\000\002\001\001\000\010\007\117\023\210\026\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\007\031" +
    "\010\051\011\036\012\042\013\034\014\046\017\043\024" +
    "\213\026\041\001\001\000\004\025\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }


  protected Lexer lexer;
//  protected ComplexSymbolFactory factory;

  public parser(Lexer lxr, ComplexSymbolFactory f)
  {
    super(lxr, f);
    lexer = lxr;
//    factory = f;
  }
  int errorCount = 0;
  static int MAX_ERRORS = 20;
  ErrorReport report = null;
         public void setErrorReport( ErrorReport _report) {
         	      report = _report;
         }

         public void syntax_error(java_cup.runtime.Symbol cur_token) {
             ComplexSymbolFactory.ComplexSymbol the_token =
  	      (ComplexSymbolFactory.ComplexSymbol) cur_token;
  	   report_error("Syntax error in line " +
  			the_token.getLeft().getLine() +
  			", near column " +
  			the_token.getLeft().getColumn() + ": " + the_token.value.toString() + "", null);
  	   ++ errorCount;
  	   if (errorCount > MAX_ERRORS) {
  	       System.err.println("More than " + MAX_ERRORS + " errors. " +
  				"Giving up");
  	       done_parsing();
  	       System.exit(1);
  	   }
         }

         // Overrides default error reporting
         public void report_error(String msg, Object ignored) {
         	     if (report == null) {
  	        System.err.println(msg);
  	     } else {
  	        report.err(msg);
               }
         }

         // Convenience form
         public void report_error(String msg) {
         	      report_error(msg, null);
         }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= clazz_block stmtlist 
            {
              Program RESULT =null;
		int cbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Class_Block.Clazz_Block> cb = (List<Class_Block.Clazz_Block>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(cb, sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // formal_args ::= formal_args COMMA IDENT COLON IDENT 
            {
              Args RESULT =null;
		int fhleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fhright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Args fh = (Args)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 fh.addArg(i1, i2); RESULT = fh; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_args",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // formal_args ::= IDENT COLON IDENT 
            {
              Args RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Args.formalArgs(i1, i2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_args",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // formal_args ::= empty 
            {
              Args RESULT =null;
		 RESULT = Args.formalArgs(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_args",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // inf_args ::= inf_args COMMA expr 
            {
              Args.Informal_Args RESULT =null;
		int ialeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Args.Informal_Args ia = (Args.Informal_Args)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ia.addArg(e); RESULT = ia; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inf_args",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inf_args ::= expr 
            {
              Args.Informal_Args RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Args.informalArgs(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inf_args",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // inf_args ::= empty 
            {
              Args.Informal_Args RESULT =null;
		 RESULT = Args.informalArgs(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inf_args",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // clazz_block ::= clazz_block clss 
            {
              List<Class_Block.Clazz_Block> RESULT =null;
		int cbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Class_Block.Clazz_Block> cb = (List<Class_Block.Clazz_Block>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Class_Block.Clazz_Block c = (Class_Block.Clazz_Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 cb.add(c); RESULT = cb; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clazz_block",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // clazz_block ::= empty 
            {
              List<Class_Block.Clazz_Block> RESULT =null;
		 RESULT = new LinkedList<Class_Block.Clazz_Block>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clazz_block",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // clss ::= CLASS IDENT LPAREN formal_args RPAREN EXTENDS IDENT LBRACE stmtlist mthd_block RBRACE 
            {
              Class_Block.Clazz_Block RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int faleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int faright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Args fa = (Args)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Methods.Method> mb = (List<Methods.Method>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Class_Block.class_block(i1, fa, i2, sl, mb); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clss",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // clss ::= CLASS IDENT LPAREN formal_args RPAREN LBRACE stmtlist mthd_block RBRACE 
            {
              Class_Block.Clazz_Block RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int faleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int faright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Args fa = (Args)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Methods.Method> mb = (List<Methods.Method>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Class_Block.class_block(i, fa, sl, mb); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clss",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmtlist ::= stmtlist stmt 
            {
              List<Statement> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 sl.add(s); RESULT = sl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtlist",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmtlist ::= empty 
            {
              List<Statement> RESULT =null;
		 RESULT = new LinkedList<Statement>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtlist",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= asmt_stmt SEMI 
            {
              Statement RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement as = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = as; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= ifstmt 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement i = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= return_stmt SEMI 
            {
              Statement RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement r = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= typecase 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement t = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= while_expr 
            {
              Statement RESULT =null;
		int weleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int weright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement we = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = we; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= expr SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Statement.expressionStatement(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // mthd_block ::= mthd_block method 
            {
              List<Methods.Method> RESULT =null;
		int mbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Methods.Method> mb = (List<Methods.Method>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Methods.Method m = (Methods.Method)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 mb.add(m); RESULT = mb; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mthd_block",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // mthd_block ::= empty 
            {
              List<Methods.Method> RESULT =null;
		 RESULT = new LinkedList<Methods.Method>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mthd_block",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // method ::= DEF IDENT LPAREN formal_args RPAREN COLON IDENT LBRACE stmtlist RBRACE 
            {
              Methods.Method RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int faleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int faright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Args fa = (Args)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Methods.method(i1, fa, i2, sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // method ::= DEF IDENT LPAREN formal_args RPAREN LBRACE stmtlist RBRACE 
            {
              Methods.Method RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int faleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int faright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Args fa = (Args)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Methods.method(i, fa, sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // return_stmt ::= RETURN expr 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Statement.returnStatement(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // return_stmt ::= RETURN 
            {
              Statement RESULT =null;
		 RESULT = Statement.returnStatement(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // asmt_stmt ::= expr GETS expr 
            {
              Statement RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Statement.asmt_stmt(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asmt_stmt",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // asmt_stmt ::= expr COLON IDENT GETS expr 
            {
              Statement RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Statement.asmt_stmt(e1, i, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asmt_stmt",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // typecase ::= TYPECASE IDENT LBRACE type_block RBRACE 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int taleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int taright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> ta = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Statement.typecase(i, ta); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typecase",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // type_block ::= type_block type_stmts 
            {
              List<Statement> RESULT =null;
		int taleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int taright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> ta = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement ts = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ta.add(ts); RESULT = ta; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_block",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type_block ::= empty 
            {
              List<Statement> RESULT =null;
		 RESULT = new LinkedList<Statement>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_block",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // type_stmts ::= IDENT COLON IDENT LBRACE stmtlist RBRACE 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Statement.typeStatement(i, t, sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_stmts",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ifstmt ::= IF expr LBRACE stmtlist RBRACE 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Statement.ifStatement(e, sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifstmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ifstmt ::= IF expr LBRACE stmtlist RBRACE elifstmt 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement lf = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Statement.ifStatement(e, sl, lf ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifstmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ifstmt ::= IF expr LBRACE stmtlist RBRACE elsestmt 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement es = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Statement.ifStatement(e, sl, es ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifstmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // elsestmt ::= ELSE LBRACE stmtlist RBRACE 
            {
              Statement RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Statement.elseStatement(sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsestmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // elifstmt ::= ELIF expr LBRACE stmtlist RBRACE 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Statement.ifStatement(e, sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elifstmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // elifstmt ::= ELIF expr LBRACE stmtlist RBRACE elsestmt 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement es = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Statement.ifStatement(e, sl, es); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elifstmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // elifstmt ::= ELIF expr LBRACE stmtlist RBRACE elifstmt 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement lf = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Statement.ifStatement(e, sl, lf ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elifstmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // while_expr ::= WHILE expr LBRACE stmtlist RBRACE 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> sb = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Statement.whileStatement(e, sb); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // op ::= PLUS 
            {
              String RESULT =null;
		 RESULT = "+"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // op ::= MINUS 
            {
              String RESULT =null;
		 RESULT = "-"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // op ::= TIMES 
            {
              String RESULT =null;
		 RESULT = "*"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // op ::= DIV 
            {
              String RESULT =null;
		 RESULT = "/"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // op ::= LESS 
            {
              String RESULT =null;
		 RESULT = "<"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // op ::= GREATER 
            {
              String RESULT =null;
		 RESULT = ">"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // op ::= EQUALS 
            {
              String RESULT =null;
		 RESULT = "=="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // op ::= ATLEAST 
            {
              String RESULT =null;
		 RESULT = ">="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // op ::= ATMOST 
            {
              String RESULT =null;
		 RESULT = "<="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // op ::= AND 
            {
              String RESULT =null;
		 RESULT = "and"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // op ::= OR 
            {
              String RESULT =null;
		 RESULT = "or"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= expr PLUS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Expression.binop(e1, "+", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= expr MINUS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Expression.binop(e1, "-", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= expr TIMES expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Expression.binop(e1, "*", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= expr DIV expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Expression.binop(e1, "/", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= expr LESS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Expression.binop(e1, "<", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= expr GREATER expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Expression.binop(e1, ">", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= expr EQUALS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Expression.binop(e1, "==", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= expr ATLEAST expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Expression.binop(e1, ">=", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= expr ATMOST expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Expression.binop(e1, "<=", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= expr AND expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Expression.binop(e1, "and", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= expr OR expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Expression.binop(e1, "or", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= MINUS expr 
            {
              Expression RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Expression.unop("-", e, mleft, eright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= NOT expr 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression b = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Expression.unop("!", b, nleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr ::= INT_LIT 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Expression.intconst(i, ileft, iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr ::= STRING_LIT 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Expression.stringLit(s, sleft, sright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr ::= expr DOT IDENT 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Expression.methodCall(e, i, eleft, iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr ::= expr DOT IDENT LPAREN inf_args RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ialeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Args.Informal_Args ia = (Args.Informal_Args)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Expression.methodCall(e, i, ia, eleft, rpright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr ::= IDENT LPAREN inf_args RPAREN 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ialeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Args.Informal_Args ia = (Args.Informal_Args)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Expression.constructor(i, ia, ileft, rpright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr ::= IDENT 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Expression.ident(i, ileft, iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr ::= LPAREN expr RPAREN 
            {
              Expression RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Expression.priority(e, lpleft, rpright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // empty ::= 
            {
              Empty RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("empty",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
