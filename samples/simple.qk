class C1()  extends Obj {
   def foo():  C1{
       return C1();    /* CHANGED */
   }
}

class C2() extends C1 {
   def foo():  C1 {
        return C1();    /* Conforms to C1.foo() */
   }
}

class C3() extends C2 { 
   def foo(): C2 {
        return C2();   /* Conforms to C2.foo() */
   }
}

class C4() extends C3 {
    def foo() : C3 {
         return C3();  /* Conforms to C3.foo() */
    }
}
/* Obviously you can extend this pattern indefintely.  
 * Now type x below ... what should happen? 
 */ 
class d(){

def s(){
x = C4();           
while ( x == x ) {
   x = x.foo();      /* Type system should reject this */
}
}
}